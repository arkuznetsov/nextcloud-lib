#Использовать "../src"
#Использовать asserts
#Использовать fs

Перем Сервис;                        // сервис NextCloud
Перем ИмяТестовойГруппы;             // имя тестовой группы пользователей NextCloud
Перем ИмяТестовогоПользователя;      // имя тестового пользователя NextCloud
Перем ПарольТестовогоПользователя;   // пароль тестового пользователя NextCloud

// Процедура выполняется перед запуском теста
//
Процедура ПередЗапускомТеста() Экспорт

	Лог = Служебный.Лог();

	Лог.УстановитьУровень(УровниЛога.Отладка);

	АдминИмя = ПолучитьПеременнуюСреды("NC_ADMIN_NAME");
	АдминПароль = ПолучитьПеременнуюСреды("NC_ADMIN_PWD");

	Сервис = Новый ПодключениеNextCloud("http://localhost:8080", АдминИмя, АдминПароль);

	ИмяТестовойГруппы           = "testGroup1";
	ИмяТестовогоПользователя    = "testUser1";
	ПарольТестовогоПользователя = "p@ssw0rd,dr0wss@p";

	СписокПользователей = Сервис.Пользователи().Список();

	Если НЕ СписокПользователей.Найти(ИмяТестовогоПользователя) = Неопределено Тогда
		Сервис.Пользователи().Удалить(ИмяТестовогоПользователя);
	КонецЕсли;

	СписокГрупп = Сервис.ГруппыПользователей().Список();

	Если НЕ СписокГрупп.Найти(ИмяТестовойГруппы) = Неопределено Тогда
		Сервис.ГруппыПользователей().Удалить(ИмяТестовойГруппы);
	КонецЕсли;

КонецПроцедуры // ПередЗапускомТеста()

// Функция возвращает список тестов для выполнения
//
// Параметры:
//    Тестирование    - Тестер        - Объект Тестер (1testrunner)
//    
// Возвращаемое значение:
//    Массив        - Массив имен процедур-тестов
//    
Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	СписокТестов = Новый Массив();

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокГруппПользователей");
	СписокТестов.Добавить("ТестДолжен_ДобавитьГруппуПользователей");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокПользователейГруппы");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокАдминистраторовГруппы");
	СписокТестов.Добавить("ТестДолжен_УдалитьГруппуПользователей");

	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокПользователей");
	СписокТестов.Добавить("ТестДолжен_ДобавитьПользователя");
	СписокТестов.Добавить("ТестДолжен_ПолучитьДанныеПользователя");
	СписокТестов.Добавить("ТестДолжен_ИзменитьПочтуПользователя");
	СписокТестов.Добавить("ТестДолжен_ОтключитьАктивностьПользователя");
	СписокТестов.Добавить("ТестДолжен_ВключитьАктивностьПользователя");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокИзменяемыхПолей");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокГруппПользователя");
	СписокТестов.Добавить("ТестДолжен_ДобавитьПользователяВГруппу");
	СписокТестов.Добавить("ТестДолжен_УдалитьПользователяИзГруппы");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокАдминистрируемыхГруппПользователя");
	СписокТестов.Добавить("ТестДолжен_ДобавитьПользователяВАдминистраторыГруппы");
	СписокТестов.Добавить("ТестДолжен_УдалитьПользователяИзАдминистраторовГруппы");
	СписокТестов.Добавить("ТестДолжен_УдалитьПользователя");

	Возврат СписокТестов;
	
КонецФункции // ПолучитьСписокТестов()

// Процедура выполняется после запуска теста
//
Процедура ПослеЗапускаТеста() Экспорт

	СписокПользователей = Сервис.Пользователи().Список();

	Если НЕ СписокПользователей.Найти(ИмяТестовогоПользователя) = Неопределено Тогда
		Сервис.Пользователи().Удалить(ИмяТестовогоПользователя);
	КонецЕсли;

	СписокГрупп = Сервис.ГруппыПользователей().Список();

	Если НЕ СписокГрупп.Найти(ИмяТестовойГруппы) = Неопределено Тогда
		Сервис.ГруппыПользователей().Удалить(ИмяТестовойГруппы);
	КонецЕсли;

КонецПроцедуры // ПослеЗапускаТеста()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокГруппПользователей() Экспорт
	
	СписокГрупп = Сервис.ГруппыПользователей().Список();

	Утверждения.ПроверитьБольше(СписокГрупп.Количество(),
	                            0,
	                            "Ошибка получения списка групп пользователей NextCloud");

КонецПроцедуры // ТестДолжен_ПолучитьСписокГруппПользователей()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьГруппуПользователей() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	СписокГрупп = Сервис.ГруппыПользователей().Список();

	ТекстОшибки = СтрШаблон("Ошибка создания группы пользователей ""%1""", ИмяТестовойГруппы);

	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы),
	                                 Неопределено,
	                                 ТекстОшибки);

КонецПроцедуры // ТестДолжен_ДобавитьГруппуПользователей()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокПользователейГруппы() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокПользователей = Сервис.ГруппыПользователей().ПользователиГруппы(ИмяТестовойГруппы);

	ТекстОшибки = СтрШаблон("Ошибка получения списка пользователей группы ""%1""", ИмяТестовойГруппы);

	Утверждения.ПроверитьНеРавенство(СписокПользователей.Найти(ИмяТестовогоПользователя),
	                                 Неопределено,
	                                 ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьСписокПользователейГруппы()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокАдминистраторовГруппы() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	Сервис.Пользователи().ДобавитьПользователяВАдминистраторыГруппы(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокПользователей = Сервис.ГруппыПользователей().АдминистраторыГруппы(ИмяТестовойГруппы);

	ТекстОшибки = СтрШаблон("Ошибка получения списка администраторов группы ""%1""", ИмяТестовойГруппы);

	Утверждения.ПроверитьНеРавенство(СписокПользователей.Найти(ИмяТестовогоПользователя), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьСписокАдминистраторовГруппы()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьГруппуПользователей() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	СписокГрупп = Сервис.ГруппыПользователей().Список();

	ТекстОшибки = СтрШаблон("Ошибка создания группы пользователей ""%1""", ИмяТестовойГруппы);

	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

	Сервис.ГруппыПользователей().Удалить(ИмяТестовойГруппы);

	СписокГрупп = Сервис.ГруппыПользователей().Список();

	ТекстОшибки = СтрШаблон("Ошибка удаления группы пользователей ""%1""", ИмяТестовойГруппы);
	
	Утверждения.ПроверитьРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_УдалитьГруппуПользователей()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокПользователей() Экспорт
	
	СписокПользователей = Сервис.Пользователи().Список();

	ТекстОшибки = "Ошибка получения списка пользователей NextCloud";

	Утверждения.ПроверитьБольше(СписокПользователей.Количество(), 0, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьСписокПользователей()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьПользователя() Экспорт
	
	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	СписокПользователей = Сервис.Пользователи().Список();

	ТекстОшибки = СтрШаблон("Ошибка создания пользователя ""%1""", ИмяТестовогоПользователя);

	Утверждения.ПроверитьНеРавенство(СписокПользователей.Найти(ИмяТестовогоПользователя), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ДобавитьПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьДанныеПользователя() Экспорт
	
	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	ДанныеПользователя = Сервис.Пользователи().ДанныеПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка получения данных пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьРавенство(ДанныеПользователя.Ид, ИмяТестовогоПользователя, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьДанныеПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ИзменитьПочтуПользователя() Экспорт
	
	ПочтаПользователя = СтрШаблон("%1@localhost.int", ИмяТестовогоПользователя);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ИзменитьЗначениеПоля(ИмяТестовогоПользователя, "Почта", ПочтаПользователя);

	ДанныеПользователя = Сервис.Пользователи().ДанныеПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка изменения почты пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьРавенство(ДанныеПользователя.Почта, ПочтаПользователя, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ИзменитьПочтуПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ОтключитьАктивностьПользователя() Экспорт
	
	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ИзменитьАктивность(ИмяТестовогоПользователя, Ложь);

	ДанныеПользователя = Сервис.Пользователи().ДанныеПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка отключения активности пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьЛожь(ДанныеПользователя.Активность, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ОтключитьАктивностьПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ВключитьАктивностьПользователя() Экспорт
	
	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ИзменитьАктивность(ИмяТестовогоПользователя, Ложь);

	ДанныеПользователя = Сервис.Пользователи().ДанныеПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка отключения активности пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьЛожь(ДанныеПользователя.Активность, ТекстОшибки);

	Сервис.Пользователи().ИзменитьАктивность(ИмяТестовогоПользователя, Истина);

	ДанныеПользователя = Сервис.Пользователи().ДанныеПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка включения активности пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьИстину(ДанныеПользователя.Активность, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ВключитьАктивностьПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокИзменяемыхПолей() Экспорт
	
	СписокПолей = Сервис.Пользователи().ИзменяемыеПоля();

	ТекстОшибки = "Ошибка получения списка изменяемых полей";
	
	Утверждения.ПроверитьБольше(СписокПолей.Количество(), 0, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьСписокИзменяемыхПолей()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокГруппПользователя() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().ГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка получения списка групп пользователя ""%1""",
	                        ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьСписокГруппПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьПользователяВГруппу() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().ГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка добавления пользователя ""%1"" в группу ""%2""",
	                        ИмяТестовогоПользователя,
	                        ИмяТестовойГруппы);
	
	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ДобавитьПользователяВГруппу()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьПользователяИзГруппы() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().ГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка добавления пользователя ""%1"" в группу ""%2""",
	                        ИмяТестовогоПользователя,
	                        ИмяТестовойГруппы);
	
	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

	Сервис.Пользователи().УдалитьПользователяИзГруппы(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().ГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка удаления пользователя ""%1"" из группы ""%2""",
	                        ИмяТестовогоПользователя,
	                        ИмяТестовойГруппы);
	
	Утверждения.ПроверитьРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_УдалитьПользователяИзГруппы()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокАдминистрируемыхГруппПользователя() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	Сервис.Пользователи().ДобавитьПользователяВАдминистраторыГруппы(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().АдминистрируемыеГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка получения списка администрируемых групп пользователя ""%1""",
	                        ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ПолучитьСписокАдминистрируемыхГруппПользователя()

// Процедура - тест
//
Процедура ТестДолжен_ДобавитьПользователяВАдминистраторыГруппы() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	Сервис.Пользователи().ДобавитьПользователяВАдминистраторыГруппы(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().АдминистрируемыеГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка добавления пользователя ""%1"" в администраторы группы ""%2""",
	                        ИмяТестовогоПользователя,
	                        ИмяТестовойГруппы);
	
	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_ДобавитьПользователяВАдминистраторыГруппы()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьПользователяИзАдминистраторовГруппы() Экспорт
	
	Сервис.ГруппыПользователей().Добавить(ИмяТестовойГруппы);

	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	Сервис.Пользователи().ДобавитьПользователяВГруппу(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	Сервис.Пользователи().ДобавитьПользователяВАдминистраторыГруппы(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().АдминистрируемыеГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка добавления пользователя ""%1"" в администраторы группы ""%2""",
	                        ИмяТестовогоПользователя,
	                        ИмяТестовойГруппы);
	
	Утверждения.ПроверитьНеРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);
	
	Сервис.Пользователи().УдалитьПользователяИзАдминистраторовГруппы(ИмяТестовогоПользователя, ИмяТестовойГруппы);

	СписокГрупп = Сервис.Пользователи().АдминистрируемыеГруппыПользователя(ИмяТестовогоПользователя);

	ТекстОшибки = СтрШаблон("Ошибка удаления пользователя ""%1"" из администраторов группы ""%2""",
	                        ИмяТестовогоПользователя,
	                        ИмяТестовойГруппы);
	
	Утверждения.ПроверитьРавенство(СписокГрупп.Найти(ИмяТестовойГруппы), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_УдалитьПользователяИзАдминистраторовГруппы()

// Процедура - тест
//
Процедура ТестДолжен_УдалитьПользователя() Экспорт
	
	Сервис.Пользователи().Добавить(ИмяТестовогоПользователя, ПарольТестовогоПользователя);

	СписокПользователей = Сервис.Пользователи().Список();

	ТекстОшибки = СтрШаблон("Ошибка создания пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьНеРавенство(СписокПользователей.Найти(ИмяТестовогоПользователя), Неопределено, ТекстОшибки);

	Сервис.Пользователи().Удалить(ИмяТестовогоПользователя);

	СписокПользователей = Сервис.Пользователи().Список();

	ТекстОшибки = СтрШаблон("Ошибка удаления пользователя ""%1""", ИмяТестовогоПользователя);
	
	Утверждения.ПроверитьРавенство(СписокПользователей.Найти(ИмяТестовогоПользователя), Неопределено, ТекстОшибки);

КонецПроцедуры // ТестДолжен_УдалитьПользователя()
