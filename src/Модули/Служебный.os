// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/nextcloud-lib/
// ----------------------------------------------------------

#Использовать logos
#Использовать tempfiles
#Использовать strings
#Использовать 1connector

Перем Лог;

// Функция добавляет кавычки в начале и в конце переданной строки
//   
// Параметры:
//   Строка         - Строка        - Строка для добавления кавычек
//
// Возвращаемое значение:
//    Строка - строка с добавленными кавычками
//
Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат СтрШаблон("""%1""", СтрЗаменить(Строка, """", """"""));
	КонецЕсли;
КонецФункции // ОбернутьВКавычки()

// Процедура - убирает в строке начальные и конечные кавычки
//
// Параметры:
//	Значение    - Строка     - строка для обработки
//
// Возвращаемое значение:
//    Строка     - строка без кавычек
//
Процедура УбратьКавычки(Значение) Экспорт

	Если Лев(Значение, 1) = """"  И Прав(Значение, 1) = """" Тогда
		Значение = Сред(Значение, 2, СтрДлина(Значение) - 2);
	КонецЕсли;

КонецПроцедуры // УбратьКавычки()

// Функция проверяет, что переданное значение является числом или строковым представлением числа
//   
// Параметры:
//   Параметр      - Строка, Число     - значение для проверки
//
// Возвращаемое значение:
//    Булево       - Истина - значение является числом или строковым представлением числа
//
Функция ЭтоЧисло(Параметр) Экспорт

	Если ТипЗнч(Параметр) = Тип("Число") Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка
		ПараметрЧислом = Число(Параметр); //@skip-warning
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;

КонецФункции // ЭтоЧисло()

// Функция проверяет, что переданное значение является числом или строковым представлением числа
//   
// Параметры:
//   Параметр      - Строка, Число     - значение для проверки
//
// Возвращаемое значение:
//    Булево       - Истина - значение является числом или строковым представлением числа
//
Функция ЭтоGUID(Параметр) Экспорт

	РВ = Новый РегулярноеВыражение("(?i)[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}");
	
	Возврат РВ.Совпадает(Параметр);

КонецФункции // ЭтоGUID()

// Функция - возвращает Истина если значение является пустым GUID
//
// Параметры:
//    Значение      - Строка     - проверяемое значение
//
// Возвращаемое значение:
//    Булево     - Истина - значение является пустым GUID
//
Функция ЭтоПустойGUID(Значение) Экспорт

	Возврат (Значение = "00000000-0000-0000-0000-000000000000") ИЛИ НЕ ЗначениеЗаполнено(Значение);

КонецФункции // ЭтоПустойGUID()

// Функция возвращает значение указанного поля структуры/соответствия или значение по умолчанию
//   
// Параметры:
//   ПарамСтруктура      - Структура, Соответствие    - коллекция из которой возвращается значение
//   Ключ                - Произвольный               - значение ключа коллекции для получения значения
//   ПоУмолчанию         - Произвольный               - значение, возвращаемое в случае,
//                                                      когда ключ отсутствует в коллекции
//   
// Возвращаемое значение:
//    Произвольный - значение элемента коллекции или значение по умолчанию
//
Функция ПолучитьЗначениеИзСтруктуры(ПарамСтруктура, Ключ, ПоУмолчанию = Неопределено) Экспорт

	Если ТипЗнч(ПарамСтруктура) = Тип("Структура") Тогда
		Если ПарамСтруктура.Свойство(Ключ) Тогда
			Возврат ПарамСтруктура[Ключ];
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПарамСтруктура) = Тип("Соответствие") Тогда
		Если НЕ ПарамСтруктура.Получить(Ключ) = Неопределено Тогда
			Возврат ПарамСтруктура.Получить(Ключ);
		КонецЕсли;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;

КонецФункции // ПолучитьЗначениеИзСтруктуры()

// Функция возвращает лог библиотеки
//   
// Возвращаемое значение:
//    Логгер - лог библиотеки
//
Функция Лог() Экспорт
	
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ИмяЛога());
	КонецЕсли;

	Возврат Лог;

КонецФункции // Лог()

// Функция возвращает имя лога библиотеки
//   
// Возвращаемое значение:
//    Строка - имя лога библиотеки
//
Функция ИмяЛога() Экспорт

	Возврат "oscript.lib.nextcloud";
	
КонецФункции // ИмяЛога()
